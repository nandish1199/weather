{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","console","log","date","Date","time","toLocaleTimeString","localdate","toLocaleDateString","getDay","getMonth","day","month","useState","timer","setTimer","setInterval","api","query","setQuery","weather","setWeather","useEffect","fetch","then","res","json","result","main","catch","err","className","temp","type","placeholder","onChange","e","target","value","Math","round","pressure","humidity","temp_max","temp_min","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAAe,I,YC+EAA,MA5Ef,WACEC,QAAQC,IAAI,WACZ,IAAIC,EAAO,IAAIC,KACXC,EAAOF,EAAKG,qBACZC,EAAYJ,EAAKK,qBAWrB,EAAmB,CAVN,CACX,SACA,SACA,UACA,WACA,aACA,SACA,YAGyBL,EAAKM,UADjB,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAC1BN,EAAKO,aAApDC,EAAL,KAAUC,EAAV,KACA,EAAwBC,qBAAxB,mBAAKC,EAAL,KAAYC,EAAZ,KAOEC,aALiB,WACjB,IAAIb,EAAO,IAAIC,KACfC,EAAOF,EAAKG,qBACZS,EAASV,KAEe,KAI1B,IAAMY,EACA,mCADAA,EAEC,0CAGP,EAAuBJ,mBAAS,QAAhC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAA2BN,mBAAS,IAApC,mBAAOO,EAAP,KAAeC,EAAf,KAUA,OATAC,qBAAU,WACZC,MAAM,GAAD,OAAIN,EAAJ,qBAAyBC,EAAzB,+BAAqDD,IACnDO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJN,EAAWM,EAAOC,MAClB3B,QAAQC,IAAIkB,MACXS,OAAM,SAACC,GAAO7B,QAAQC,IAAI4B,EAAI,+BACnC,CAACZ,IAGD,sBAAKa,UAAWX,GAAYA,EAAQY,KAAK,GAAM,WAAmB,MAAlE,UACE,qBAAKD,UAAU,YAAf,SACA,uBACAA,UAAU,aACTE,KAAK,SACLC,YAAY,kBACZC,SAAU,SAAAC,GAAC,OAAEjB,EAASiB,EAAEC,OAAOC,QAC/BA,MAAOpB,MAIPE,EACC,qBAAKW,UAAU,MAAf,SACE,sBAAKA,UAAU,QAAf,UACH,oBAAIA,UAAU,YAAd,SAA2Bb,IAC3B,qBAAIa,UAAU,mBAAd,UAAkCQ,KAAKC,MAAMpB,EAAQY,MAArD,WAEA,qBAAID,UAAU,gBAAd,sBAAwCX,EAAQqB,YAChD,qBAAIV,UAAU,gBAAd,sBAAwCX,EAAQsB,YAChD,qBAAIX,UAAU,sBAAd,uBAA+CQ,KAAKC,MAAMpB,EAAQuB,UAAlE,qBAAiGJ,KAAKC,MAAMpB,EAAQwB,UAApH,WACA,sBAAKb,UAAU,QAAf,UAAwBxB,EAAxB,MAAqC,+BAAOO,IAA5C,QACA,sBAAKiB,UAAU,QAAf,UAAwBpB,EAAxB,KAAgCC,EAAhC,YAIC,mBAAGmB,UAAU,SAAb,+CC5DOc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.18323b96.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nfunction App() {\n  console.log(\"started\")\n  let date = new Date();\n  let time = date.toLocaleTimeString();\n  let localdate = date.toLocaleDateString();\n  let arrday = [\n    \"sunday\",\n    \"monday\",\n    \"tuesday\",\n    \"thursday\",\n    \"weddnesday\",\n    \"friday\",\n    \"saturday\",\n  ];\n  let arrmonth = [\"jan\",\"feb\",\"mar\",\"apr\",\"may\",\"june\",\"july\",\"aug\",\"sep\",\"nov\",\"dec\"]\n  let [day, month] = [arrday[date.getDay()], arrmonth[date.getMonth()]];\n  let [timer, setTimer] = useState();\n\n  const UpdateTime = () => {\n    let date = new Date();\n    time = date.toLocaleTimeString();\n    setTimer(time);\n  };\n    setInterval(UpdateTime, 1000);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  const api ={\n    key:\"36094e4f5ad4dc323078617916db16b0\",\n    base:\"http://api.openweathermap.org/data/2.5/\"\n  }\n  \n  const [query,setQuery]=useState(\"pune\");\n  const [weather,setWeather]=useState({});\n  useEffect(()=>{\nfetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        setWeather(result.main);\n        console.log(weather)\n      }).catch((err)=>{console.log(err,\"error in fetching data\")});\n  },[query]);\n\n  return (\n    <div className={weather ? ((weather.temp>30) ? \"app warm\" :\"app\"):\"app\"} >\n      <div className=\"searchdiv\">\n      <input\n      className=\"citySearch\"\n       type=\"search\"\n       placeholder=\"Enter city name\"\n       onChange={e=>setQuery(e.target.value)}\n       value={query}\n       />\n      </div>\n      \n      {weather ? (\n        <div className=\"box\">\n          <div className=\"inbox\">\n       <h1 className=\"same name\">{query}</h1>\n       <h2 className=\"same temperature\">{Math.round(weather.temp)}&#176;C</h2>\n       \n       <h2 className=\"same pressure\">Pressure:{weather.pressure}</h2>\n       <h2 className=\"same humidity\">Humidity:{weather.humidity}</h2>\n       <h2 className=\"same macTemperature\">Temp Max: {Math.round(weather.temp_max)}&#176;c | Temp Min: {Math.round(weather.temp_min)}&#176;C</h2>\n       <div className=\"other\">{localdate} | <span>{timer}</span>  </div>\n       <div className=\"other\">{day}  { month} </div>\n       </div>\n       </div>\n      ):(\n        <p className=\"errmsg\">Please enter avalid city Name</p>\n      )}\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}